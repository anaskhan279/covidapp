{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recover","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","x5","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","recovered","url","fetchData","country","a","changebleUrl","axios","get","fetchDailyData","map","positive","hospitalized","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","setState","this","classNames","image","src","coronaimg","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e7449a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1BRUX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__8gleE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__Iwha1\",\"card\":\"Cards_card__16yc8\",\"infected\":\"Cards_infected__2ek2l\",\"recovered\":\"Cards_recovered__lfjl7\",\"deaths\":\"Cards_deaths__25LYg\"};","import React from 'react';\r\nimport  {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nconst Cards=({data: {confirmed, recover,deaths,lastUpdate}})=>{\r\n    console.log(recover)\r\n\r\n    if(!confirmed)\r\n    {\r\n        return 'loading...';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n             <Grid container spacing={3} justify=\"center\">\r\n                 <Grid item component={Card} x5={12} md={3} className={cx(styles.card,styles.infected)} > \r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                         <Typography variant=\"h5\">\r\n                             <CountUp \r\n                              start={0}\r\n                              end={confirmed.value}\r\n                              duration={2.5}\r\n                              separator=\",\"\r\n                             />\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                         <Typography variant=\"body2\">No Of Active Test Cases Of COVID-19</Typography>\r\n                     </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card} x5={12} md={3} className={cx(styles.card,styles.recovered)}> \r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                         <Typography variant=\"h5\">\r\n                             <CountUp \r\n                              start={0}\r\n                              end={recover}\r\n                              duration={2.5}\r\n                              separator=\",\"\r\n                             />\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                         <Typography variant=\"body2\">No Of Recoveries From COVID-19</Typography>\r\n                     </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card} x5={12} md={3} className={cx(styles.card,styles.deaths)}> \r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\r\n                         <Typography variant=\"h5\">\r\n                             <CountUp \r\n                              start={0}\r\n                              end={deaths.value}\r\n                              duration={2.5}\r\n                              separator=\",\"\r\n                             />\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                         <Typography variant=\"body2\">No Of Deaths Caused By COVID-19</Typography>\r\n                     </CardContent>\r\n                 </Grid>\r\n             </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from \"axios\";\r\nconst url='https://covid19.mathdro.id/api';\r\nexport const fetchData=async(country)=>\r\n{\r\n   let changebleUrl=url;\r\n   if(country)\r\n   {\r\n      changebleUrl=`${url}/countries/${country}`;\r\n   }\r\n   try {\r\n      const {data:{confirmed, recovered, deaths, lastUpdate}}=await axios.get(changebleUrl);\r\n      const recover = confirmed.value - deaths.value; \r\n      return {confirmed, recover, deaths, lastUpdate};\r\n        \r\n\r\n   } catch (error) {\r\n       console.log(error);\r\n   }\r\n}\r\n\r\n// export const fetchDailyData=async()=>{\r\n\r\n//    try {\r\n//         const {data}=await axios.get(`${url}/daily`);\r\n\r\n//         const modifiedData=data.map((dailyData)=>({\r\n//            confirmed:dailyData.confirmed.total,\r\n//            deaths:dailyData.deaths.total,\r\n//            date:dailyData.reportDate,\r\n//         }));\r\n\r\n//        return modifiedData; \r\n\r\n//    } catch (error) {\r\n      \r\n//    }\r\n// }\r\n\r\nexport const fetchDailyData = async () => {\r\n   try {\r\n     const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n     \r\n     return data.map(({ positive, hospitalized, death, dateChecked: date }) => ({ confirmed: positive, hospitalized, deaths: death, date }));\r\n   } catch (error) {\r\n     return error;\r\n   }\r\n };\r\n\r\nexport const fetchCountries=async()=>{\r\n    try {\r\n         const {data:{countries}}=await axios.get(`${url}/countries`);\r\n         \r\n         return countries.map((country)=>country.name);\r\n\r\n    } catch (error) {\r\n       \r\n    }\r\n}","import React,{ useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport  {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nconst Chart=({data:{confirmed, recover, deaths}, country})=>{\r\n \r\n   const [dailyData,setDailyData]=useState([]);\r\n   useEffect(()=>{\r\n       const fetchAPI=async()=>{\r\n           setDailyData(await fetchDailyData());\r\n       }\r\n       fetchAPI();\r\n   },[dailyData]);\r\n\r\n   const lineChart=(\r\n       dailyData.length?\r\n       (<Line\r\n       data={\r\n            {\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    labels:dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Infected',\r\n                    borderColor:'#3333ff',\r\n                    fill:true,\r\n                }, {\r\n                    labels:dailyData.map(({recover})=>recover),\r\n                    label:'deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true,\r\n                },\r\n                   { labels:dailyData.map(({deaths})=>deaths),\r\n                    label:'deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(0,255,0,0.5)',\r\n                    fill:true,\r\n                }\r\n            ],\r\n            }\r\n        } \r\n       />):null\r\n   );\r\n   const barChart=(\r\n           confirmed\r\n           ?(<Bar \r\n             data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[\r\n                    {\r\n                        label:'people',\r\n                        backgroundColor:[\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0,0.5)',\r\n                            'rgba(255,0,0.5)',\r\n                        ],\r\n                        data:[confirmed.value, recover, deaths.value]\r\n                    }\r\n                ]\r\n             }}\r\n             options={{\r\n                 legend:{display:false},\r\n                 title:{display:true, text:`Current state in ${country}`},\r\n             }}\r\n           />):null\r\n   );\r\n    return(\r\n        <div className={styles.container}>\r\n         {country?barChart:lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React,{useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport  styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\nconst CountryPicker=( {handleCountryChange})=>{\r\n    const [fetchedCountries,setFetchedCountries]=useState([]);\r\n  \r\n     useEffect(()=>{\r\n         const fetchAPI=async()=>{\r\n             setFetchedCountries(await fetchCountries());\r\n         }\r\n\r\n         fetchAPI();\r\n     },[setFetchedCountries]);\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n              <option value=''>Global</option>\r\n              {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react'\nimport {Cards, Chart, CountryPicker} from './components'; \nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaimg from './images/image.png';\nclass App extends React.Component{\n  \n   state={\n     data:{},\n     country:'',\n   }\n\n  async componentDidMount(){\n      const data=await fetchData();\n       this.setState({data});\n  }\n\n  handleCountryChange=async(country)=>{\n    const data=await fetchData(country);\n\n    this.setState({ data, country: country});\n  }\n\n  render(){\n   \n    const {data, country}=this.state;\n\n    return(\n      <div className={styles.container}>\n        <img classNames={styles.image}src={coronaimg} alt=\"COVID-19\"/>\n        <Cards data={data} /> \n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3HRCw\",\"image\":\"App_image__hfSDZ\"};"],"sourceRoot":""}